{
  "parser": "babel-eslint",
  "plugins": [
    "react"
  ],
  "ecmaFeatures": {
    "arrowFunctions": true,
    "classes": true,
    "spread": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "templateStrings": true,
    "destructuring": true,
    "jsx": true
  },
  "env": {
    "browser": true,
    "node": true,
    "es6": true,
    "mocha": true
  },
  "rules": {
    // Possible Errors
    // The following rules point out areas where you might have made mistakes.

    "comma-dangle": 2, // disallow trailing commas in object literals
    "no-cond-assign": [2, "always"], // disallow assignment in conditional expressions
    "no-console": 2, // disallow use of console (off by default in the node environment)
    "no-constant-condition": 2, // disallow use of constant expressions in conditions
    "no-control-regex": 2, // disallow control characters in regular expressions
    "no-debugger": 2, // disallow use of debugger
    "no-dupe-args": 2, // disallow duplicate arguments in functions
    "no-dupe-keys": 2, // disallow duplicate keys when creating object literals
    "no-duplicate-case": 2, // disallow a duplicate case label
    "no-empty": 2, // disallow empty statements
    "no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
    "no-ex-assign": 2, // disallow assigning to the exception in a catch block
    "no-extra-boolean-cast": 2, // disallow double-negation boolean casts in a boolean context
    "no-extra-parens": [2, "functions"], // disallow unnecessary parentheses
    "no-extra-semi": 2, // disallow unnecessary semicolons
    "no-func-assign": 2, // disallow overwriting functions written as function declarations
    "no-inner-declarations": 2, // disallow function or variable declarations in nested blocks
    "no-invalid-regexp": 2, // disallow invalid regular expression strings in the RegExp constructor
    "no-irregular-whitespace": 2, // disallow irregular whitespace outside of strings and comments
    "no-negated-in-lhs": 2, // disallow negation of the left operand of an in expression
    "no-obj-calls": 2, // disallow the use of object properties of the global object (Math and JSON) as functions
    "no-regex-spaces": 2, // disallow multiple spaces in a regular expression literal
    "no-sparse-arrays": 2, // disallow sparse arrays
    "no-unreachable": 2, // disallow unreachable statements after a return, throw, continue, or break statement
    "use-isnan": 2, // disallow comparisons with the value NaN
    "valid-jsdoc": 0, // Ensure JSDoc comments are valid
    "valid-typeof": 2, // Ensure that the results of typeof are compared against a valid string
    "no-unexpected-multiline": 2, // Avoid code that looks like two expressions but is actually one

    // Best Practices
    // These are rules designed to prevent you from making mistakes. They either prescribe a better way of doing something or help you avoid footguns.

    "block-scoped-var": 2, // treat var statements as if they were block scoped
    "complexity": 0, // specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": 2, // require return statements to either always or never specify values
    "curly": 2, // specify curly brace conventions for all control statements
    "default-case": 2, // require default case in switch statements
    "dot-notation": 2, // encourages use of dot notation whenever possible
    "eqeqeq": 2, // require the use of === and !==
    "guard-for-in": 0, // make sure for-in loops have an if statement
    "no-alert": 2, // disallow the use of alert, confirm, and prompt
    "no-caller": 2, // disallow use of arguments.caller or arguments.callee
    "no-div-regex": 2, // disallow division operators explicitly at beginning of regular expression
    "no-else-return": 0, // disallow else after a return in an if
    "no-empty-label": 2, // disallow use of labels for anything other then loops and switches
    "no-eq-null": 2, // disallow comparisons to null without a type-checking operator
    "no-eval": 2, // disallow use of eval()
    "no-extend-native": 2, // disallow adding to native types
    "no-extra-bind": 2, // disallow unnecessary function binding
    "no-fallthrough": 2, // disallow fallthrough of case statements
    "no-floating-decimal": 2, // disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": 0, // disallow the type conversions with shorter notations
    "no-implied-eval": 2, // disallow use of eval()-like methods
    "no-labels": 2, // disallow use of labeled statements
    "no-iterator": 2, // disallow usage of __iterator__ property
    "no-lone-blocks": 2, // disallow unnecessary nested blocks
    "no-loop-func": 2, // disallow creation of functions within loops
    "no-multi-spaces": 0, // disallow use of multiple spaces
    "no-multi-str": 2, // disallow use of multiline strings
    "no-native-reassign": 2, // disallow reassignments of native objects
    "no-new-func": 2, // disallow use of new operator for Function object
    "no-new-wrappers": 2, // disallows creating new instances of String,Number, and Boolean
    "no-new": 2, // disallow use of new operator when not part of the assignment or comparison
    "no-octal": 2, // disallow use of octal literals
    "no-octal-escape": 2, // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-param-reassign": 0, // disallow reassignment of function parameters
    "no-proto": 2, // disallow usage of __proto__ property
    "no-redeclare": 2, // disallow declaring the same variable more then once
    "no-return-assign": 2, // disallow use of assignment in return statement
    "no-script-url": 0, // disallow use of javascript: urls.
    "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
    "no-sequences": 2, // disallow use of comma operator
    "no-throw-literal": 2, // restrict what can be thrown as an exception
    "no-unused-expressions": 0, // disallow usage of expressions in statement position
    "no-void": 2, // disallow use of void operator
    "no-warning-comments": 0, // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    "no-with": 2, // disallow use of the with statement
    "radix": 2, // require use of the second argument for parseInt()
    "vars-on-top": 0, // requires to declare all vars on top of their containing scope, covered by let/const
    "wrap-iife": [2, "any"], // require immediate function invocation to be wrapped in parentheses
    "yoda": 0, // require or disallow Yoda conditions

    // Strict Mode
    // These rules relate to using strict mode.

    "strict": [2, "never"], // require or disallow the "use strict" pragma in the global scope (off by default in the node environment)

    // Variables
    // These rules have to do with variable declarations.

    "init-declarations": 0, // enforce or disallow variable initializations at definition
    "no-catch-shadow": 0, // disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": 2, // disallow deletion of variables
    "no-label-var": 2, // disallow labels that share a name with a variable
    "no-shadow": 2, // disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": 2, // disallow shadowing of names such as arguments
    "no-undef": 2, // disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undefined": 0, // disallow use of undefined variable
    "no-undef-init": 2, // disallow use of undefined when initializing variables
    "no-unused-vars": [2, {
      "vars": "all",
      "args": "after-used"
    }], // disallow declaration of variables that are not used in the code
    "no-use-before-define": 2, // disallow use of variables before they are defined

    // Node.js
    // These rules are specific to JavaScript running on Node.js.

    "callback-return": 0, // enforce return after a callback
    "handle-callback-err": 0, // enforces error handling in callbacks (on by default in the node environment)
    "no-mixed-requires": 0, // disallow mixing regular variable and require declarations (on by default in the node environment)
    "no-new-require": 0, // disallow use of new operator with the require function (on by default in the node environment)
    "no-path-concat": 0, // disallow string concatenation with __dirname and __filename (on by default in the node environment)
    "no-process-exit": 0, // disallow process.exit() (on by default in the node environment)
    "no-restricted-modules": 0, // restrict usage of specified node modules
    "no-sync": 0, // disallow use of synchronous methods

    // Stylistic Issues
    // These rules are purely matters of style and are quite subjective.

    "brace-style": [2, "1tbs", { "allowSingleLine": true }], // enforce one true brace style
    "comma-spacing": [2, { "before": false, "after": true }], // enforce spacing before and after comma
    "comma-style": [2, "last"], // enforce one true comma style
    "indent": [2, 2], // specify tab or space width for your code
    "key-spacing": 0,
    "camelcase": [2, {"properties": "never"}], // require camel case names
    "consistent-this": 0, // enforces consistent naming when capturing the current execution context
    "eol-last": 2, // enforce newline at the end of file, with no multiple empty lines
    "func-names": 0, // require function expressions to have a name
    "func-style": 0, // enforces use of function declarations or expressions
    "new-cap": [2, {
      "newIsCap": true,
      "capIsNewExceptions": [
        "Immutable.Map",
        "Immutable.List",
        "LoadData",
        "PrefixRoute"
      ]
    }], // require a capital letter for constructors
    "new-parens": 2, // disallow the omission of parentheses when invoking a constructor with no arguments
    "no-nested-ternary": 0, // disallow nested ternary expressions
    "no-array-constructor": 2, // disallow use of the Array constructor
    "no-lonely-if": 0, // disallow if as the only statement in an else block
    "no-new-object": 2, // disallow use of the Object constructor
    "no-spaced-func": 2, // disallow space between function identifier and application
    "no-restricted-syntax": 0, // disallow use of certain syntax in code
    "no-ternary": 0, // disallow the use of ternary operators
    "no-trailing-spaces": 2, // disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
    "no-mixed-spaces-and-tabs": 2, // disallow mixed spaces and tabs for indentation
    "one-var": [2, "never"], // allow just one var statement per function
    "padded-blocks": 0, // enforce padding within blocks
    "quotes": [2, "single", "avoid-escape"], // specify whether double or single quotes should be used
    "quote-props": 0, // require quotes around object literal property names
    "require-jsdoc": 0, // Require JSDoc comment
    "semi": [2, "always"], // require or disallow use of semicolons instead of ASI
    "semi-spacing": [2, {"before": false, "after": true}], // disallow space before semicolon
    "sort-vars": 0, // sort variables within the same declaration block
    "space-after-keywords": 2, // require a space after certain keywords
    "space-before-keywords": 2, // require or disallow a space before blocks (fixable)
    "space-before-blocks": 2, // require or disallow a space before blocks
    "space-before-function-paren": [2, "never"], // require or disallow a space before function opening parenthesis
    "space-in-parens": 0, // require or disallow spaces inside parentheses
    "space-infix-ops": 2, // require spaces around operators
    "space-return-throw-case": 2, // require a space after return, throw, and case
    "space-unary-ops": 2, // require a space around word operators such as typeof
    "spaced-comment": 0, // require or disallow a space immediately following the // or /* in a comment
    "max-nested-callbacks": 0, // specify the maximum depth callbacks can be nested
    "wrap-regex": 0, // require regex literals to be wrapped in parentheses

    // ECMAScript 6
    // These rules are only relevant to ES6 environments.

    "constructor-super": 2,
    "arrow-spacing": 2, // require space before/after arrow function's arrow
    "no-class-assign": 2,
    "no-const-assign": 2,
    "no-dupe-class-members": 2,
    "no-this-before-super": 2,
    "no-var": 2,
    "object-shorthand": 0,
    "prefer-const": 2,
    "prefer-template": 2,

    // Legacy
    // The following rules are included for compatibility with JSHint and JSLint. While the names of the rules may not match up with the JSHint/JSLint counterpart, the functionality is the same.

    "max-len": [2, 120], // specify the maximum length of a line in your program

    // React

    "jsx-quotes": [2, "prefer-single"], // specify whether double or single quotes should be used in JSX attributes
    "react/display-name": 0, // Prevent missing displayName in a React component definition
    "react/jsx-boolean-value": 0, // Enforce boolean attributes notation in JSX
    "react/jsx-closing-bracket-location": 0, // Validate closing bracket location in JSX
    "react/jsx-curly-spacing": 0, // Enforce or disallow spaces inside of curly braces in JSX attributes
    "react/jsx-indent-props": [2, 2],
    "react/jsx-no-duplicate-props": 2, // Prevent duplicate props in JSX
    "react/jsx-no-undef": 2,
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/no-did-mount-set-state": [2, "allow-in-func"],
    "react/no-did-update-set-state": [2, "allow-in-func"],
    "react/no-unknown-property": 2,
    "react/no-multi-comp": 0,
    "react/prop-types": 2,
    "react/react-in-jsx-scope": 2,
    "react/self-closing-comp": 2,
    "react/wrap-multilines": 2
  }
}
